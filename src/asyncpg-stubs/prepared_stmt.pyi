from . import connresource, cursor
from .connection import Connection
from .protocol import Record
from .types import Attribute, Type
from typing import Any, Optional, List, Tuple, TypeVar

_C = TypeVar('_C', bound=Connection)

class PreparedStatement(connresource.ConnectionResource[_C]):
    def __init__(self, connection: _C, query: Any, state: Any) -> None: ...
    def get_query(self) -> str: ...
    def get_statusmsg(self) -> str: ...
    def get_parameters(self) -> Tuple[Type, ...]: ...
    def get_attributes(self) -> Tuple[Attribute, ...]: ...
    def cursor(
        self, *args: Any, prefetch: int = ..., timeout: float = ...
    ) -> cursor.CursorFactory[_C]: ...
    async def explain(self, *args: Any, analyze: bool = ...) -> Any: ...
    async def fetch(self, *args: Any, timeout: float = ...) -> List[Record]: ...
    async def fetchval(
        self, *args: Any, column: int = ..., timeout: float = ...
    ) -> Optional[Any]: ...
    async def fetchrow(self, *args: Any, timeout: float = ...) -> Optional[Record]: ...
    def __del__(self) -> None: ...
