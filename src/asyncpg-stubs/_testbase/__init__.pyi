import unittest
from typing import Any, Optional

def silence_asyncio_long_exec_warning(): ...
def with_timeout(timeout: Any): ...

class TestCaseMeta:
    TEST_TIMEOUT: Any = ...
    def __new__(cls: Any, name: Any, bases: Any, ns: Any): ...

class TestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def assertRunUnder(self, delta: Any) -> None: ...
    def assertLoopErrorHandlerCalled(self, msg_re: str) -> Any: ...
    def loop_exception_handler(self, loop: Any, context: Any) -> None: ...

def create_pool(
    dsn: Optional[Any] = ...,
    *,
    min_size: int = ...,
    max_size: int = ...,
    max_queries: int = ...,
    max_inactive_connection_lifetime: float = ...,
    setup: Optional[Any] = ...,
    init: Optional[Any] = ...,
    loop: Optional[Any] = ...,
    pool_class: Any = ...,
    connection_class: Any = ...,
    **connect_kwargs: Any,
): ...

class ClusterTestCase(TestCase):
    @classmethod
    def get_server_settings(cls): ...
    @classmethod
    def new_cluster(
        cls, ClusterCls: Any, *, cluster_kwargs: Any = ..., initdb_options: Any = ...
    ): ...
    @classmethod
    def start_cluster(cls, cluster: Any, *, server_settings: Any = ...) -> None: ...
    @classmethod
    def setup_cluster(cls) -> None: ...
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    @classmethod
    def get_connection_spec(cls, kwargs: Any = ...): ...
    @classmethod
    def connect(cls, **kwargs: Any): ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    def create_pool(
        self, pool_class: Any = ..., connection_class: Any = ..., **kwargs: Any
    ): ...

class ProxiedClusterTestCase(ClusterTestCase):
    @classmethod
    def get_server_settings(cls): ...
    @classmethod
    def get_proxy_settings(cls): ...
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
    @classmethod
    def get_connection_spec(cls, kwargs: Any): ...
    def tearDown(self) -> None: ...

def with_connection_options(**options: Any): ...

class ConnectedTestCase(ClusterTestCase):
    con: Any = ...
    server_version: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
