# Stubs for asyncpg.cluster (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional, Tuple
from asyncio import AbstractEventLoop

def platform_exe(name): ...
def ensure_dead_with_parent(): ...

ensure_dead_with_parent: Any

def find_available_port(port_range: Tuple[int, int] = ..., max_tries: int = ...) -> Optional[int]: ...

class ClusterError(Exception): ...

class Cluster:
    def __init__(self, data_dir: str, *, pg_config_path: Optional[str] = ...) -> None: ...
    def is_managed(self): ...
    def get_data_dir(self): ...
    def get_status(self): ...
    def connect(self, loop: Optional[AbstractEventLoop] = ..., **kwargs): ...
    def init(self, **settings): ...
    def start(self, wait: int = ..., *, server_settings: Any = ..., **opts): ...
    def reload(self): ...
    def stop(self, wait: int = ...): ...
    def destroy(self): ...
    def get_connection_spec(self): ...
    def override_connection_spec(self, **kwargs): ...
    def reset_hba(self): ...
    def add_hba_entry(self, *, type: str = ..., database: str, user: str, address: Optional[str] = ..., auth_method: str, auth_options: Optional[Any] = ...): ...
    def trust_local_connections(self): ...
    def trust_local_replication_by(self, user: str): ...

class TempCluster(Cluster):
    def __init__(self, *, data_dir_suffix: Optional[Any] = ..., data_dir_prefix: Optional[Any] = ..., data_dir_parent: Optional[Any] = ..., pg_config_path: Optional[Any] = ...) -> None: ...

class HotStandbyCluster(TempCluster):
    def __init__(self, master, replication_user, *, data_dir_suffix: Optional[Any] = ..., data_dir_prefix: Optional[Any] = ..., data_dir_parent: Optional[Any] = ..., pg_config_path: Optional[Any] = ...) -> None: ...
    def init(self, **settings): ...

class RunningCluster(Cluster):
    conn_spec: Any = ...
    def __init__(self, **kwargs) -> None: ...
    def is_managed(self): ...
    def get_connection_spec(self): ...
    def get_status(self): ...
    def init(self, **settings): ...
    def start(self, wait: int = ..., **settings): ...
    def stop(self, wait: int = ...): ...
    def destroy(self): ...
    def reset_hba(self): ...
    def add_hba_entry(self, *, type: str = ..., database, user, address: Optional[Any] = ..., auth_method, auth_options: Optional[Any] = ...): ...
