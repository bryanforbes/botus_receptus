[project]
name = "botus_receptus"
version = "25.5.1.dev0"
description = ""
authors = [
  {name = "Bryan Forbes", email = "bryan@reigndropsfall.net"}
]
license = "BSD-3-Clause"
requires-python = ">=3.12,<3.14"
dynamic = ["dependencies"]

[tool.poetry]
packages = [
  { include = "botus_receptus", from = "src" },
]

[tool.poetry.dependencies]
typing_extensions = "~4.13.2"
aioitertools = "^0.12.0"
attrs = "^25.3.0"
"audioop-lts" = {version = "*", python = "^3.13"}
click = "^8.2.1"
"discord.py" = "^2.5.2"
tomli = "^2.2.1"
pendulum = "~3.1.0"
asyncpg = {version = "~0.30.0", optional = true}
sqlalchemy = {version = "~2.0.41", optional = true}
uvloop = {version = "~0.21.0", optional = true}
greenlet = {version = "^3.2.2", optional = true}

[tool.poetry.extras]
all = ["asyncpg", "greenlet", "sqlalchemy", "uvloop"]
db = ["asyncpg"]
sqlalchemy = ["asyncpg", "greenlet", "sqlalchemy"]
uvloop = ["uvloop"]

[tool.poetry.group.dev.dependencies]
asyncpg-stubs = "0.30.1"
black = "25.1.0"
coverage = {extras = ["toml"], version = "7.8.2"}
mypy = "1.15.0"
pre-commit = "4.2.0"
pytest = "8.3.5"
pytest-asyncio = "0.26.0"
pytest-cov = "6.1.1"
pytest-mock = "3.14.0"
pytest-sugar = "1.0.0"
pytest-xdist = "3.6.1"
pytest-rerunfailures = "15.1"
ruff = "0.11.11"

[tool.black]
line-length = 88
target-version = ["py312"]
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | alembic
  | htmlcov
)/
'''

[tool.coverage.paths]
source = [
  "src/",
  ".tox/**/site-packages/"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
  "^\\s+pass$",
  "^\\s*if TYPE_CHECKING:",
  "^\\s*\\.\\.\\.\\s*$",
  "@overload",
  "@abstractmethod",
]

[tool.ruff]
extend-exclude = [".venv*"]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
  "ANN", "B", "B9", "BLE", "C", "C4", "C9", "E", "EXE", "F", "FBT", "G",
  "I", "I002", "ISC", "INP", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "Q", "RET",
  "RSE", "S", "SIM", "T10", "T20", "TCH", "TID251", "TRY", "UP", "W", "RUF"
]
ignore = ["PLR0913", "PLR2004", "TRY003"]

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["E501", "E701", "E741", "F401", "F403", "F405", "F811", "TCH"]
"tests/*.py" = ["ANN401", "FBT001", "FBT002", "PGH003", "PLR0912", "S101"]

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.isort]
extra-standard-library = ["typing_extensions", "_types", "_typeshed"]
known-first-party = ["botus_receptus"]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypeVar".msg = "Use `typing_extensions.TypeVar` instead."

[tool.pyright]
include = ["src", "tests"]
venvPath = "."
venv = ".venv"

pythonVersion = "3.12"
typeCheckingMode = "strict"
reportUnnecessaryTypeIgnoreComment = "warning"
reportPrivateUsage = "none"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportImportCycles = "none"
reportImplicitOverride = "error"
enableExperimentalFeatures = true
deprecateTypingAliases = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts ="--cov=botus_receptus --cov-branch --cov-report=term"
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
  "ignore:.*'audioop' is deprecated:DeprecationWarning"
]
asyncio_default_fixture_loop_scope = "function"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = clean,py312,report
isolated_build = True

[testenv]
deps =
    pytest
    pytest-asyncio
    pytest-cov
    pytest-mock
    pytest-sugar
    pytest-xdist
    pytest-rerunfailures
extras =
    all
setenv =
    py312: COVERAGE_FILE=.coverage.{envname}
commands = py.test {posargs:-vv}
depends =
    py312: clean
    report: py312

[testenv:clean]
deps = coverage[toml]
skip_install = true
commands = coverage erase

[testenv:report]
deps = coverage[toml]
skip_install = true
parallel_show_output = true
commands =
    coverage combine
    coverage report
    coverage html
"""

[build-system]
requires = ["poetry_core>=2.1.3"]
build-backend = "poetry.core.masonry.api"
