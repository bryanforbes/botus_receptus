# Stubs for asyncpg.pool (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from . import connection
from .protocol import Record
from typing import Any, Optional, Type, Callable, Iterable, Sequence, List, AsyncContextManager, Awaitable
from asyncio import AbstractEventLoop

class PoolConnectionProxyMeta(type):
    def __new__(mcls, name, bases, dct, *, wrap: bool = ...): ...
    def __init__(cls, name, bases, dct, *, wrap: bool = ...) -> None: ...

class PoolConnectionProxy(connection._ConnectionProxy):
    def __init__(self, holder: 'PoolConnectionHolder', con: connection.Connection) -> None: ...
    def __getattr__(self, attr): ...

class PoolConnectionHolder:
    def __init__(self, pool, connect_args, connect_kwargs, max_queries, setup, init, max_inactive_time) -> None: ...
    def connect(self): ...
    def acquire(self) -> PoolConnectionProxy: ...
    def release(self): ...
    def close(self): ...
    def terminate(self): ...

class Pool(AsyncContextManager['Pool'], Awaitable['Pool']):
    def __init__(self, *connect_args, min_size, max_size, max_queries, max_inactive_connection_lifetime, setup, init, loop, connection_class, **connect_kwargs) -> None: ...
    def _async__init__(self): ...
    async def execute(self, query: str, *args, timeout: float = ...) -> str: ...
    async def executemany(self, command: str, args: Iterable[Sequence[Any]], *, timeout: float = ...) -> None: ...
    async def fetch(self, query: str, *args, timeout: float = ...) -> List[Record[Any]]: ...
    async def fetchval(self, query: str, *args, column: int = ..., timeout: float = ...) -> Optional[Any]: ...
    async def fetchrow(self, query: str, *args, timeout: float = ...) -> Optional[Record[Any]]: ...
    def acquire(self, *, timeout: Optional[float] = ...) -> 'PoolAcquireContext': ...
    async def release(self, connection: connection.Connection) -> None: ...
    async def close(self) -> None: ...
    def terminate(self) -> None: ...

class PoolAcquireContext(AsyncContextManager[connection.Connection], Awaitable[connection.Connection]):
    pool: Any = ...
    timeout: Any = ...
    connection: Any = ...
    done: bool = ...
    def __init__(self, pool, timeout) -> None: ...

def create_pool(dsn: Optional[str] = ..., *, min_size: int = ..., max_size: int = ..., max_queries: int = ...,
                max_inactive_connection_lifetime: float = ...,
                setup: Optional[Callable[[PoolConnectionProxy], Any]] = ...,
                init: Optional[Callable[[connection.Connection], Any]] = ...,
                loop: Optional[AbstractEventLoop] = ..., connection_class: Type[connection.Connection] = ...,
                **connect_kwargs) -> Pool: ...
