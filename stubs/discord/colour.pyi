from typing import Any, Tuple, Hashable


class Colour(Hashable):
    def __eq__(self, other: Any) -> bool: ...

    def __ne__(self, other: Any) -> bool: ...

    @property
    def r(self) -> int: ...

    @property
    def g(self) -> int: ...

    @property
    def b(self) -> int: ...

    def to_rgb(self) -> Tuple[int, int, int]: ...

    @classmethod
    def from_rgb(cls, r: int, g: int, b: int) -> 'Colour': ...

    @classmethod
    def default(cls) -> 'Colour': ...

    @classmethod
    def teal(cls) -> 'Colour': ...

    @classmethod
    def dark_teal(cls) -> 'Colour': ...

    @classmethod
    def green(cls) -> 'Colour': ...

    @classmethod
    def dark_green(cls) -> 'Colour': ...

    @classmethod
    def blue(cls) -> 'Colour': ...

    @classmethod
    def dark_blue(cls) -> 'Colour': ...

    @classmethod
    def purple(cls) -> 'Colour': ...

    @classmethod
    def dark_purple(cls) -> 'Colour': ...

    @classmethod
    def magenta(cls) -> 'Colour': ...

    @classmethod
    def dark_magenta(cls) -> 'Colour': ...

    @classmethod
    def gold(cls) -> 'Colour': ...

    @classmethod
    def dark_gold(cls) -> 'Colour': ...

    @classmethod
    def orange(cls) -> 'Colour': ...

    @classmethod
    def dark_orange(cls) -> 'Colour': ...

    @classmethod
    def red(cls) -> 'Colour': ...

    @classmethod
    def dark_red(cls) -> 'Colour': ...

    @classmethod
    def light_grey(cls) -> 'Colour': ...

    @classmethod
    def lighter_grey(cls) -> 'Colour': ...

    @classmethod
    def dark_grey(cls) -> 'Colour': ...

    @classmethod
    def darker_grey(cls) -> 'Colour': ...

    @classmethod
    def blurple(cls) -> 'Colour': ...

    @classmethod
    def greyple(cls) -> 'Colour': ...


Color = Colour
